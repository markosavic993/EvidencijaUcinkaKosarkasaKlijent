/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package forme;

import domen.Kosarkas;
import domen.Tim;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.BorderFactory;
import javax.swing.JOptionPane;
import komunikacija.KlijentKomunikacija;
import org.jdesktop.swingx.autocomplete.AutoCompleteDecorator;
import transfer.TransferObjekatOdgovor;
import transfer.TransferObjekatZahtev;
import util.Konstante;

/**
 *
 * @author Marko
 */
public class FrmKosarkasUnos extends javax.swing.JDialog {

    TransferObjekatZahtev toZahtev = new TransferObjekatZahtev();
    TransferObjekatOdgovor toOdgovor = new TransferObjekatOdgovor();

    /**
     * Creates new form FrmKosarkasUnos
     */
    public FrmKosarkasUnos(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        pozicionirajFormu();
        popuniComboZaDatum();
        popuniComboZaPoziciju();
        popuniComboZaBroj();
        popuniComboZaTimove();

    }

    public FrmKosarkasUnos(java.awt.Frame parent, boolean modal, String naslov, Kosarkas k) {
        super(parent, modal);
        initComponents();
        this.setTitle(naslov);
        jLabel1.setText("Izmena košarkaša!");
        pozicionirajFormu();
        popuniComboZaDatum();
        popuniComboZaPoziciju();
        popuniComboZaBroj();
        popuniComboZaTimove(k.getTimZaKojiNastupa());
        popuniPolja(k);
        podesiPristupElementima();
        this.pack();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jtxtIme = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jtxtPrezime = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jcomboDan = new javax.swing.JComboBox();
        jLabel6 = new javax.swing.JLabel();
        jcomboGodina = new javax.swing.JComboBox();
        jLabel7 = new javax.swing.JLabel();
        jcomboMesec = new javax.swing.JComboBox();
        jLabel8 = new javax.swing.JLabel();
        jtxtVisina = new javax.swing.JTextField();
        jtxtTezina = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jcomboPozicija = new javax.swing.JComboBox();
        jLabel12 = new javax.swing.JLabel();
        jcomboBroj = new javax.swing.JComboBox();
        jLabel11 = new javax.swing.JLabel();
        jbtnDodajTim = new javax.swing.JButton();
        jbtnResetuj = new javax.swing.JButton();
        jbtnPotvrdi = new javax.swing.JButton();
        jcomboTimovi = new javax.swing.JComboBox();
        jtxtJMBG = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Unos novog košarkaša");
        setResizable(false);
        addWindowFocusListener(new java.awt.event.WindowFocusListener() {
            public void windowGainedFocus(java.awt.event.WindowEvent evt) {
                listenerBroj2(evt);
            }
            public void windowLostFocus(java.awt.event.WindowEvent evt) {
            }
        });
        addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                focusGainedHandler(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setText("Unos kosarkasa");

        jLabel2.setText("Ime:");

        jLabel3.setText("Prezime:");

        jLabel4.setText("JMBG:");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Datum rođenja"));

        jLabel5.setText("Dan:");

        jcomboDan.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel6.setText("Godina:");

        jcomboGodina.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel7.setText(" Mesec:");

        jcomboMesec.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jcomboGodina, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jcomboMesec, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 15, Short.MAX_VALUE)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jcomboDan, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jcomboDan, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(jcomboGodina, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7)
                    .addComponent(jcomboMesec, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(20, Short.MAX_VALUE))
        );

        jLabel8.setText("Visina (cm):");

        jLabel9.setText("Tezina (kg):");

        jLabel10.setText("Pozicija:");

        jcomboPozicija.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel12.setText("Broj na dresu:");

        jcomboBroj.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel11.setText("Izaberi tim:");

        jbtnDodajTim.setText(" Dodaj tim");
        jbtnDodajTim.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnDodajTimActionPerformed(evt);
            }
        });

        jbtnResetuj.setText("Resetuj");
        jbtnResetuj.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnResetujActionPerformed(evt);
            }
        });

        jbtnPotvrdi.setText("Potvrdi");
        jbtnPotvrdi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnPotvrdiActionPerformed(evt);
            }
        });

        jcomboTimovi.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addGap(22, 22, 22)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jtxtVisina, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jtxtTezina, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jcomboPozicija, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jcomboBroj, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jcomboTimovi, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jbtnDodajTim)))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(32, 32, 32)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel4)
                                .addComponent(jLabel2)
                                .addComponent(jLabel3))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jtxtIme, javax.swing.GroupLayout.DEFAULT_SIZE, 203, Short.MAX_VALUE)
                                .addComponent(jtxtPrezime)
                                .addComponent(jtxtJMBG))
                            .addGap(12, 12, 12)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel8)
                            .addComponent(jLabel9)
                            .addComponent(jLabel10)
                            .addComponent(jLabel12)
                            .addComponent(jLabel11))
                        .addGap(257, 257, 257)))
                .addContainerGap(42, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(129, 129, 129)
                        .addComponent(jbtnResetuj)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jbtnPotvrdi))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(133, 133, 133)
                        .addComponent(jLabel1)))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jtxtIme, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jtxtPrezime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jtxtJMBG, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(jtxtVisina, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(jtxtTezina, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(jcomboPozicija, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(jcomboBroj, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(jcomboTimovi, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jbtnDodajTim, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 51, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbtnResetuj)
                    .addComponent(jbtnPotvrdi))
                .addGap(20, 20, 20))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jbtnDodajTimActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnDodajTimActionPerformed
        //Kontroler.getInstance().inicijalizujFormu(this);
        FrmTimUnos formaZaUnosTima = new FrmTimUnos(null, true);
        formaZaUnosTima.setVisible(true);

    }//GEN-LAST:event_jbtnDodajTimActionPerformed

    private void jbtnResetujActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnResetujActionPerformed
        jtxtIme.setText("");
        jtxtPrezime.setText("");
        if (jtxtJMBG.isEditable()) {
            jtxtJMBG.setText("");
        }
        jtxtTezina.setText("");
        jtxtVisina.setText("");
        jcomboBroj.setSelectedIndex(0);
        jcomboDan.setSelectedIndex(0);
        jcomboGodina.setSelectedIndex(0);
        jcomboMesec.setSelectedIndex(0);
        jcomboPozicija.setSelectedIndex(0);
        jcomboTimovi.setSelectedIndex(0);

    }//GEN-LAST:event_jbtnResetujActionPerformed

    private void jbtnPotvrdiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnPotvrdiActionPerformed
        String ime = jtxtIme.getText();
        String prezime = jtxtPrezime.getText();
        String jmbg = jtxtJMBG.getText();
        String visina = jtxtVisina.getText();
        String tezina = jtxtTezina.getText();

        SimpleDateFormat sdf = new SimpleDateFormat("dd.MM.yyyy.");

        String datum = jcomboDan.getSelectedItem() + "." + (jcomboMesec.getSelectedIndex() + 1)
                + "." + jcomboGodina.getSelectedItem() + ".";
        Date datumOsnivanja = null;
        try {
            datumOsnivanja = sdf.parse(datum);
        } catch (ParseException ex) {
            Logger.getLogger(FrmKosarkasUnos.class.getName()).log(Level.SEVERE, null, ex);
        }

        int broj = (int) jcomboBroj.getSelectedItem();
        String pozicija = (String) jcomboPozicija.getSelectedItem();
        Tim tim = null;
        if (jcomboTimovi.getSelectedItem() instanceof Tim) {
            tim = (Tim) jcomboTimovi.getSelectedItem();
        } else if (jcomboTimovi.getSelectedItem().equals("Slobodni agent")) {
            tim = null;
        } else {
            JOptionPane.showMessageDialog(this, "Morate izabrati neki tim. U slucaju da nema timova u izboru, dodajte novi.",
                    "Greska!", JOptionPane.WARNING_MESSAGE);
            return;
        }

        if (daLiSuValidniPodaciZaKosarkasa(ime, prezime, jmbg, visina, tezina)) {
            Kosarkas k = new Kosarkas(ime, prezime, jmbg, datumOsnivanja, pozicija, broj, tim,
                    Integer.parseInt(visina), Integer.parseInt(tezina));

            if (!jtxtJMBG.isEditable()) {
                JOptionPane.showMessageDialog(this, "Košarkaš je ažuriran");
                toZahtev.setOperacija(Konstante.AZURIRAJ_KOSARKASA);
                toZahtev.setParametar(k);
                KlijentKomunikacija.getInstance().posaljiZahtev(toZahtev);
                try {
                    toOdgovor = KlijentKomunikacija.getInstance().primiOdgovor();
                } catch (IOException | ClassNotFoundException ex) {
                    Logger.getLogger(FrmKosarkasUnos.class.getName()).log(Level.SEVERE, null, ex);
                }
                if (toOdgovor.getIzuzetak() != null) {
                    try {
                        throw (Exception) toOdgovor.getIzuzetak();
                    } catch (Exception ex) {
                        Logger.getLogger(FrmLogovanje.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }

            } else {
                toZahtev.setOperacija(Konstante.VRATI_LISTU_KOSARKASA);
                toZahtev.setParametar(null);
                KlijentKomunikacija.getInstance().posaljiZahtev(toZahtev);
                try {
                    toOdgovor = KlijentKomunikacija.getInstance().primiOdgovor();
                } catch (IOException | ClassNotFoundException ex) {
                    Logger.getLogger(FrmKosarkasUnos.class.getName()).log(Level.SEVERE, null, ex);
                }
                if (toOdgovor.getIzuzetak() != null) {
                    try {
                        throw (Exception) toOdgovor.getIzuzetak();
                    } catch (Exception ex) {
                        Logger.getLogger(FrmLogovanje.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
                for (Kosarkas kosarkas : (List<Kosarkas>) toOdgovor.getRezultat()) {
                    if (kosarkas.getJmbg().equals(jmbg)) {
                        JOptionPane.showMessageDialog(null, "U bazi već postoji košarkaš sa unetim matičnim brojem!", "Greška!", JOptionPane.ERROR_MESSAGE);
                        return;
                    }
                }

                toZahtev.setOperacija(Konstante.SACUVAJ_KOSARKASA);
                toZahtev.setParametar(k);
                KlijentKomunikacija.getInstance().posaljiZahtev(toZahtev);
                try {
                    toOdgovor = KlijentKomunikacija.getInstance().primiOdgovor();
                } catch (IOException | ClassNotFoundException ex) {
                    Logger.getLogger(FrmKosarkasUnos.class.getName()).log(Level.SEVERE, null, ex);
                }
                if (toOdgovor.getIzuzetak() != null) {
                    try {
                        throw (Exception) toOdgovor.getIzuzetak();
                    } catch (Exception ex) {
                        Logger.getLogger(FrmLogovanje.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }

                JOptionPane.showMessageDialog(this, "Košarkaš je uspešno sačuvan!");

            }

            dispose();
        }

    }//GEN-LAST:event_jbtnPotvrdiActionPerformed

    private void focusGainedHandler(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_focusGainedHandler

    }//GEN-LAST:event_focusGainedHandler

    private void listenerBroj2(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_listenerBroj2
        if (!this.getTitle().startsWith("Izmena")) {
            popuniComboZaTimove();
        }
    }//GEN-LAST:event_listenerBroj2

    /**
     * @param args the command line arguments
     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(FrmKosarkasUnos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(FrmKosarkasUnos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(FrmKosarkasUnos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(FrmKosarkasUnos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//        //</editor-fold>
//
//        /* Create and display the dialog */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                FrmKosarkasUnos dialog = new FrmKosarkasUnos(new javax.swing.JFrame(), true);
//                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
//                    @Override
//                    public void windowClosing(java.awt.event.WindowEvent e) {
//                        System.exit(0);
//                    }
//                });
//                dialog.setVisible(true);
//            }
//        });
//    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JButton jbtnDodajTim;
    private javax.swing.JButton jbtnPotvrdi;
    private javax.swing.JButton jbtnResetuj;
    private javax.swing.JComboBox jcomboBroj;
    private javax.swing.JComboBox jcomboDan;
    private javax.swing.JComboBox jcomboGodina;
    private javax.swing.JComboBox jcomboMesec;
    private javax.swing.JComboBox jcomboPozicija;
    private javax.swing.JComboBox jcomboTimovi;
    private javax.swing.JTextField jtxtIme;
    private javax.swing.JTextField jtxtJMBG;
    private javax.swing.JTextField jtxtPrezime;
    private javax.swing.JTextField jtxtTezina;
    private javax.swing.JTextField jtxtVisina;
    // End of variables declaration//GEN-END:variables

    private void popuniComboZaDatum() {
        jcomboGodina.removeAllItems();
        int trenutnaGodina = Calendar.getInstance().get(Calendar.YEAR);
        for (int i = 1960; i <= trenutnaGodina; i++) {
            jcomboGodina.addItem(i);
        }

        jcomboMesec.removeAllItems();
        jcomboMesec.addItem("Januar");
        jcomboMesec.addItem("Februar");
        jcomboMesec.addItem("Mart");
        jcomboMesec.addItem("April");
        jcomboMesec.addItem("Maj");
        jcomboMesec.addItem("Jun");
        jcomboMesec.addItem("Jul");
        jcomboMesec.addItem("Avgust");
        jcomboMesec.addItem("Septembar");
        jcomboMesec.addItem("Oktobar");
        jcomboMesec.addItem("Novembar");
        jcomboMesec.addItem("Decembar");

        jcomboDan.removeAllItems();
        for (int i = 1; i <= 31; i++) {
            jcomboDan.addItem(i);
        }

        jcomboMesec.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                popuniComboDan(jcomboGodina.getSelectedItem(), jcomboMesec.getSelectedItem());
            }
        });

    }

    private void popuniComboDan(Object godina, Object mesec) {
        jcomboDan.removeAllItems();
        if (mesec.equals("Februar")) {
            for (int i = 1; i <= 28; i++) {
                jcomboDan.addItem(i);
            }
            if ((int) godina % 4 == 0) {
                jcomboDan.addItem(29);
            }

            return;
        }

        if (mesec.equals("April") || mesec.equals("Jun") || mesec.equals("Septembar") || mesec.equals("Novembar")) {
            for (int i = 1; i <= 30; i++) {
                jcomboDan.addItem(i);
            }
        } else {
            for (int i = 1; i <= 31; i++) {
                jcomboDan.addItem(i);
            }
        }
    }

    private void popuniComboZaPoziciju() {
        jcomboPozicija.removeAllItems();
        jcomboPozicija.addItem("Plejmejker");
        jcomboPozicija.addItem("Bek");
        jcomboPozicija.addItem("Krilo");
        jcomboPozicija.addItem("Krilni centar");
        jcomboPozicija.addItem("Centar");
    }

    private void popuniComboZaBroj() {
        jcomboBroj.removeAllItems();
        for (int i = 0; i < 99; i++) {
            jcomboBroj.addItem(i);
        }
    }

    public void popuniComboZaTimove() {
        jcomboTimovi.removeAllItems();
        jcomboTimovi.addItem("Slobodni agent");

        toZahtev.setOperacija(Konstante.VRATI_TIMOVE);
        toZahtev.setParametar(null);
        KlijentKomunikacija.getInstance().posaljiZahtev(toZahtev);
        try {
            toOdgovor = KlijentKomunikacija.getInstance().primiOdgovor();
        } catch (IOException | ClassNotFoundException ex) {
            Logger.getLogger(FrmPrikazKosarkasa.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (toOdgovor.getIzuzetak() != null) {
            try {
                throw (Exception) toOdgovor.getIzuzetak();
            } catch (Exception ex) {
                Logger.getLogger(FrmLogovanje.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        if ((List<Tim>) toOdgovor.getRezultat() == null
                || ((List<Tim>) toOdgovor.getRezultat()).isEmpty()) {
            jcomboTimovi.addItem("Trenutno nema timova!");
        }

        for (Tim tim : (List<Tim>) toOdgovor.getRezultat()) {
            jcomboTimovi.addItem(tim);
        }

        AutoCompleteDecorator.decorate(jcomboTimovi);

    }

    private boolean daLiSuValidniPodaciZaKosarkasa(String ime, String prezime, String jmbg, String visina, String tezina) {
        if (ime == null || ime.equals("")) {
            JOptionPane.showMessageDialog(this, "Morate uneti ime.", "Greska!", JOptionPane.WARNING_MESSAGE);
            jtxtIme.setBorder(BorderFactory.createLineBorder(Color.RED));
            jtxtIme.requestFocusInWindow();
            return false;
        }

        if (prezime == null || prezime.equals("")) {
            JOptionPane.showMessageDialog(this, "Morate uneti prezime.", "Greska!", JOptionPane.WARNING_MESSAGE);
            jtxtPrezime.setBorder(BorderFactory.createLineBorder(Color.RED));
            jtxtPrezime.requestFocusInWindow();
            jtxtIme.setBorder(null);
            return false;
        }

        if (jmbg == null || jmbg.equals("")) {
            JOptionPane.showMessageDialog(this, "Morate uneti JMBG.", "Greska!", JOptionPane.WARNING_MESSAGE);
            jtxtJMBG.setBorder(BorderFactory.createLineBorder(Color.RED));
            jtxtJMBG.requestFocusInWindow();
            jtxtPrezime.setBorder(null);
            jtxtIme.setBorder(null);
            return false;
        }

        if (jmbg.length() != 13) {
            JOptionPane.showMessageDialog(this, "JMBG mora imati 13 elemenata.", "Greska!", JOptionPane.WARNING_MESSAGE);
            jtxtJMBG.setBorder(BorderFactory.createLineBorder(Color.RED));
            jtxtJMBG.requestFocusInWindow();
            jtxtPrezime.setBorder(null);
            jtxtIme.setBorder(null);
            return false;
        }

        for (char c : jmbg.toCharArray()) {
            if (!Character.isDigit(c)) {
                JOptionPane.showMessageDialog(this, "Svi elementi JMBGa moraju biti cifre.", "Greska!", JOptionPane.WARNING_MESSAGE);
                jtxtJMBG.setBorder(BorderFactory.createLineBorder(Color.RED));
                jtxtJMBG.requestFocusInWindow();
                jtxtPrezime.setBorder(null);
                jtxtIme.setBorder(null);
                return false;
            }
        }

        if (visina == null || visina.equals("")) {
            JOptionPane.showMessageDialog(this, "Morate uneti visinu.", "Greska!", JOptionPane.WARNING_MESSAGE);
            jtxtVisina.setBorder(BorderFactory.createLineBorder(Color.RED));
            jtxtVisina.requestFocusInWindow();
            jtxtJMBG.setBorder(null);
            jtxtPrezime.setBorder(null);
            jtxtIme.setBorder(null);
            return false;
        }

        for (char c : visina.toCharArray()) {
            if (!Character.isDigit(c)) {
                JOptionPane.showMessageDialog(this, "Visina mora biti ceo broj (u centimetrima).", "Greska!", JOptionPane.WARNING_MESSAGE);
                jtxtVisina.setBorder(BorderFactory.createLineBorder(Color.RED));
                jtxtVisina.requestFocusInWindow();
                jtxtJMBG.setBorder(null);
                jtxtPrezime.setBorder(null);
                jtxtIme.setBorder(null);
                return false;
            }
        }

        if (Integer.parseInt(visina) < 150 || Integer.parseInt(visina) > 240) {
            JOptionPane.showMessageDialog(this, "Visina mora biti u opsegu od 150 do 240.", "Greska!", JOptionPane.WARNING_MESSAGE);
            jtxtVisina.setBorder(BorderFactory.createLineBorder(Color.RED));
            jtxtVisina.requestFocusInWindow();
            jtxtJMBG.setBorder(null);
            jtxtPrezime.setBorder(null);
            jtxtIme.setBorder(null);
            return false;
        }

        if (tezina == null || tezina.equals("")) {
            JOptionPane.showMessageDialog(this, "Morate uneti tezinu.", "Greska!", JOptionPane.WARNING_MESSAGE);
            jtxtTezina.setBorder(BorderFactory.createLineBorder(Color.RED));
            jtxtTezina.requestFocusInWindow();
            jtxtVisina.setBorder(null);
            jtxtJMBG.setBorder(null);
            jtxtPrezime.setBorder(null);
            jtxtIme.setBorder(null);
            return false;
        }

        for (char c : tezina.toCharArray()) {
            if (!Character.isDigit(c)) {
                JOptionPane.showMessageDialog(this, "Tezina mora biti ceo broj (u kilogramima).", "Greska!", JOptionPane.WARNING_MESSAGE);
                jtxtTezina.setBorder(BorderFactory.createLineBorder(Color.RED));
                jtxtTezina.requestFocusInWindow();
                jtxtVisina.setBorder(null);
                jtxtJMBG.setBorder(null);
                jtxtPrezime.setBorder(null);
                jtxtIme.setBorder(null);
                return false;
            }
        }

        if (Integer.parseInt(tezina) < 50 || Integer.parseInt(tezina) > 150) {
            JOptionPane.showMessageDialog(this, "Tezina mora biti u opsegu od 50 do 150.", "Greska!", JOptionPane.WARNING_MESSAGE);
            jtxtTezina.setBorder(BorderFactory.createLineBorder(Color.RED));
            jtxtTezina.requestFocusInWindow();
            jtxtVisina.setBorder(null);
            jtxtJMBG.setBorder(null);
            jtxtPrezime.setBorder(null);
            jtxtIme.setBorder(null);
            return false;
        }

        return true;
    }

    private void pozicionirajFormu() {
        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        this.setLocation(dim.width / 2 - this.getSize().width / 2, dim.height / 2 - this.getSize().height / 2);
    }

    private void podesiPristupElementima() {
        jtxtJMBG.setEditable(false);
        jbtnResetuj.setVisible(false);

    }

    private void popuniPolja(Kosarkas k) {
        jtxtIme.setText(k.getIme());
        jtxtPrezime.setText(k.getPrezime());
        jtxtJMBG.setText(k.getJmbg());
        jtxtTezina.setText("" + k.getTezina());
        jtxtVisina.setText("" + k.getVisina());
        jcomboBroj.setSelectedItem(k.getBrojNaDresu());
        Date datum = k.getDatumRodjenja();
        Calendar kalendar = Calendar.getInstance();
        kalendar.setTime(datum);
        jcomboDan.setSelectedItem(kalendar.get(Calendar.DAY_OF_MONTH));
        jcomboGodina.setSelectedItem(kalendar.get(Calendar.YEAR));
        jcomboMesec.setSelectedIndex(kalendar.get(Calendar.MONTH));
        jcomboPozicija.setSelectedItem(k.getPozicija());
        //jcomboTimovi.setSelectedItem(k.getTimZaKojiNastupa());
    }

    private void popuniComboZaTimove(Tim timZaKojiNastupa) {
        jcomboTimovi.removeAllItems();
        jcomboTimovi.addItem("Slobodni agent");

        toZahtev.setOperacija(Konstante.VRATI_TIMOVE);
        toZahtev.setParametar(null);
        KlijentKomunikacija.getInstance().posaljiZahtev(toZahtev);
        try {
            toOdgovor = KlijentKomunikacija.getInstance().primiOdgovor();
        } catch (IOException | ClassNotFoundException ex) {
            Logger.getLogger(FrmPrikazKosarkasa.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (toOdgovor.getIzuzetak() != null) {
            try {
                throw (Exception) toOdgovor.getIzuzetak();
            } catch (Exception ex) {
                Logger.getLogger(FrmLogovanje.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        if ((List<Tim>) toOdgovor.getRezultat() == null
                || ((List<Tim>) toOdgovor.getRezultat()).isEmpty()) {
            jcomboTimovi.addItem("Trenutno nema timova!");
            return;
        }

        for (Tim tim : (List<Tim>) toOdgovor.getRezultat()) {
            jcomboTimovi.addItem(tim);
        }
        for (int i = 0; i < ((List<Tim>) toOdgovor.getRezultat()).size(); i++) {
            if (((List<Tim>) toOdgovor.getRezultat()).get(i).equals(timZaKojiNastupa)) {
                jcomboTimovi.setSelectedIndex(i + 1);
                break;
            }
        }
    }
}
